<?php

namespace OutagesBundle\Repository;

use OutagesBundle\Entity\Outages;
use OutagesBundle\Entity\Outage_Comments;

/**
 * OutagesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OutagesRepository extends \Doctrine\ORM\EntityRepository
{

    public function addOutage(Outages $outage)
    {

        try {
            //code...
            $entity_manager = $this->getDoctrine()->getManager();
            $test =  $entity_manager->persist($outage);
            echo json_encode($test);
            $entity_manager->flush();
            return true;
        } catch (\Throwable $th) {
            echo json_encode($th);
            //throw $th;
            return false;
        }
    }

    public function fetchOutages(string $type, int $page)
    {
        // SELECT * from sdu_orders  WHERE order_status ='1' UNION SELECT * from mdu_orders where order_status='1' order by  creation_date DESC
        $outage_status = 0;
        $page_size = 2;
        $off_set = ($page - 1) * $page_size;
        switch ($type) {
            case 'open':
                $outage_status = 1;
                # code...
                break;
            case 'closed':
                $outage_status = 2;

                # code...
                break;
        }


        $query_builder = $this->createQueryBuilder('o');
        $query_builder->select('
            o.outageReference as outage_reference,
            o.outageStatus as outage_status,
            o.affectedAreas as affected_areas,
            o.creationDate as creation_date,
            o.incidentType as incident_type,
            o.severity ,
            o.lastUpdated as last_updated,
            o.description,
            o.outageId as outage_id
            
           ');
        $query2 = $this->createQueryBuilder('c');
        $query2->select('count(c.outageId)');
        $query2->where($query2->expr()->eq('c.outageStatus', ':outage_status'));

        // $query_builder->innerJoin('OutagesBundle\Entity\Outage_Comments', 'c', 'WITH', 'o.outageId=c.outage');
        $query_builder->where($query_builder->expr()->eq('o.outageStatus', ':outage_status'));
        $query_builder ->setFirstResult($off_set);
        $query_builder ->setMaxResults($page_size);
        $query_builder->setParameter('outage_status', $outage_status);
        $query_builder->addSelect('(' . $query2->getDQL() . ') as total_entries');
        $result = $query_builder->getQuery()->getResult();




        return $result;
    }

    public function countEntries()
    {
        $query_builder = $this->createQueryBuilder('o');
        $query_builder->select('count(o.outageId)');
        $result = $query_builder->getQuery()->getSingleScalarResult();

        return $result;
    }

    public function closeOutage(int $outage_id)
    {


        $query_builder = $this->createQueryBuilder('o');
        $query_builder->update('OutagesBundle\Entity\Outages', 'o');
        $query_builder->set('o.outageStatus', ':status');
        $query_builder->where($query_builder->expr()->eq('o.outageId', ':outage'));
        $query_builder->setParameter('status', 2);
        $query_builder->setParameter('outage', $outage_id);
        $result = $query_builder->getQuery()->getResult();

        return $result;
    }
}
