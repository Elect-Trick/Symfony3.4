<?php

namespace OrdersBundle\Repository;

use Doctrine\DBAL\Types\Type;
use stdClass;

/**
 * Mdu_LocationsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Mdu_LocationsRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * This function searches for duplicates and returns the unit number if found.
     * Used when to prevent duplcicatition when creating a new location 
     *
     * @param string $_locationRef
     * @param string $unit_number
     * @return $unit_number;
     */
    public function findDuplicate(string $_locationRef, string $unit_number)
    {


        if (!is_null($_locationRef)) {
            $query_builder = $this->createQueryBuilder('m');
            $query_builder->select('m.locationId');
            $query_builder->Where('m.locationRef = :location_ref');
            $query_builder->andWhere('m.mduUnit = :unit_number');
            $query_builder->setParameter('location_ref', $_locationRef);
            $query_builder->setParameter('unit_number', $unit_number);
            $result = $query_builder->getQuery()->execute();
            return $result;
        }
    }
    /**
     * This function is used to retrieve a location then place a order based on that location.
     * Aceepts an object with the location type and location search string. 
     * It then returns a id and type, possibly more...
     *
     * 
     * 
     */
    public function findLocationWithSearchString(string $unit, string $mdu_name, string $surburb)
    {

        if (empty($surburb)) {
            $query_builder = $this->createQueryBuilder('m');
            $query_builder->select('m.locationId as location_id,
            m.mduUnit as unit,
            m.mduName as mdu_name,
            m.mduStreetName as street_name,
            m.mduSurburb as surburb,
             m.locationType as location_type');
            $query_builder->Where($query_builder->expr()->like('m.mduUnit', ':unit'));
            $query_builder->andWhere($query_builder->expr()->like('m.mduName', ':mdu_name'));
            $query_builder->setParameter('unit', "%" . $unit . "%");
            $query_builder->setParameter('mdu_name', "%" . $mdu_name . "%");
            $result = $query_builder->getQuery()->execute();
            return $result;
        } else {
            $query_builder = $this->createQueryBuilder('m');
            $query_builder->select('m.locationId as location_id,
            m.mduUnit as unit,
            m.mduStreetName as street_name,
            m.mduSurburb as surburb,
             m.locationType as location_type');
            $query_builder->Where($query_builder->expr()->like('m.mduUnit', ':unit'));
            $query_builder->andWhere($query_builder->expr()->like('m.mduName', ':mdu_name'));
            $query_builder->andWhere($query_builder->expr()->like('m.mduSurburb', ':mdu_surburb'));
            $query_builder->setParameter('unit', "%" . $unit . "%");
            $query_builder->setParameter('mdu_name', "%" . $mdu_name . "%");
            $query_builder->setParameter('mdu_surburb', "%" . $surburb . "%");
            $result = $query_builder->getQuery()->execute();
            return $result;
        }
    }
    /**
     * Fetches paginated MDU Locations
     *
     * @param string $type
     * @param integer $page
     * @return void
     */
    public function fetchLocations(string $type, int $page)
    {
        $page_size = 2;
        $off_set = ($page - 1) * $page_size;

        $query_builder = $this->createQueryBuilder('m');
        $query_builder->select('
        m.locationId as location_id,
        m.mduSurburb as surburb,
        m.mduName as mdu_name
        ');
        $query_builder->where($query_builder->expr()->isNotNull('m.locationId'));
        $query_builder->groupBy('m.mduName,m.mduSurburb');
        $query_builder->orderBy('m.mduSurburb', 'ASC');
        $query_builder ->setFirstResult($off_set);
        $query_builder ->setMaxResults($page_size);
        $query2 = $this->createQueryBuilder('c');
        $query2->select($query2->expr()->countDistinct('c.mduName'));
        // $query2->where($query2->expr()->countDistinct('c.mduName'));
        $query_builder ->addSelect('('.$query2->getDQL().') as totalEntries');
        

        $result = $query_builder->getQuery()->getResult();

        $final = new stdClass();
        // $final->locations = $result;
        // $final->totalEntries = count($result);
        return $result;
    }
    public function fetchUnits(string $mdu_name, string $surburb)
    {

        $query_builder = $this->createQueryBuilder('m');
        $query_builder->select('
        m.locationId as location_id,
        m.mduUnit as unit,
        m.mduSurburb as surburb,
        m.mduStreetName as street_name
        ');
        $query_builder->where($query_builder->expr()->like('m.mduName', ':mdu_name'));
        $query_builder->andwhere($query_builder->expr()->like('m.mduSurburb', ':surburb'));
        $query_builder->setParameter('mdu_name', '%' . $mdu_name . '%', Type::STRING);
        $query_builder->setParameter('surburb', '%' . $surburb . '%', Type::STRING);

        $query_builder->orderBy('m.mduUnit', 'DESC');
        $result = $query_builder->getQuery()->getResult();;
        return $result;
    }

    /**
     * This function is used to retrieve a location based on a given ID
     * Aceepts an integer used to search for the location record.
     * @returns an array based object of the location
     *
     * 
     * 
     */
    public function findLocationById(int $locationId)
    {

        $query_builder = $this->createQueryBuilder('m');
        $query_builder->select('m.locationId as location_id,
            m.mduUnit as unit,
            m.mduName as mdu_name,
            m.mduStreetName as street_name,
            m.mduSurburb as surburb,
             m.locationType as location_type');
        $query_builder->Where($query_builder->expr()->eq('m.locationId', ':location_id'));
        $query_builder->setParameter('location_id', $locationId);
        $result = $query_builder->getQuery()->execute();
        return $result;
    }
}
