<?php

namespace OrdersBundle\Repository;

use OrdersBundle\Entity\Mdu_Orders;
use Doctrine\DBAL\Types\Type;

/**
 * Mdu_OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Mdu_OrdersRepository extends \Doctrine\ORM\EntityRepository
{

    public function findDuplicateOrder(Mdu_Orders $input)
    {
        $query_builder = $this->createQueryBuilder('m');
        $query_builder->select('m.location');
        $query_builder->where($query_builder->expr()->andX(
            $query_builder->expr()->eq('m.orderStatus', ':order_status'),
            $query_builder->expr()->eq('m.location', ':location_id')
        ));
        $query_builder->setParameter('order_status', $input->getOrderStatus(), Type::INTEGER);
        $query_builder->setParameter('location_id', $input->getLocation(), Type::INTEGER);
        $result = $query_builder->getQuery()->getResult();


        return $result;
    }

    public function countEntries()
    {
        $query_builder = $this->createQueryBuilder('m');
        $query_builder->select('count(m.id)');
        $result = $query_builder->getQuery()->getSingleScalarResult();

        return $result;
    }

    public function retrieveOrders(string $type, int $page)
    {
        $order_status = [1, 2];
        //  order_status is used to filter out active and cancelled
        $page_size = 2;
        $off_set = ($page - 1) * $page_size;

        $count_query = $this->createQueryBuilder('c');
        $count_query->select('count(c.id)');
        $count_query->where($count_query->expr()->in('c.orderStatus', ':order_status'));
        $count_query->setParameter('order_status', $order_status);





        $query_builder = $this->createQueryBuilder('m');
        $query_builder->select('
         m.id ,
         m.orderType as order_type,
         m.orderNumber as order_number,
         m.orderStatus as order_status,
         m.product,
         m.creationDate as creation_date,
         m.clientName as client_name,
         m.clientSurname as client_surname,
         m.clientEmail as client_email,
         m.clientContactNumber as contact_number,
         m.ispReference as isp_reference,
         m.organizationId as organization_id,
         m.networkId as network_id,
         m.locationType as location_type,
         m.orderFulfilled as order_fullfilled,
         m.location,
         l.mduName as mdu_name,
         l.mduUnit as unit,
         l.mduStreetName as street_name,
        l.mduSurburb as surburb

           ');
        $query_builder->innerJoin('OrdersBundle\Entity\Mdu_Locations', 'l', 'WITH', 'm.location=l.locationId');
        $query_builder->where($query_builder->expr()->in('m.orderStatus', ':order_status'));

        $query_builder->setFirstResult($off_set);
        $query_builder->setMaxResults($page_size);
        $query_builder->setParameter('order_status', $order_status);
        $query_builder->addSelect('(' . $count_query->getDQL() . ') as totalEntries');

        $result = $query_builder->getQuery()->getResult();


        return $result;
    }

    public function findOrder(string $order_number)
    {
        // echo "order number is " . $order_number;
        $query_builder = $this->createQueryBuilder('m');
        $query_builder->select('m.orderType,
        m.orderNumber,
        m.orderStatus,
        m.product,
        m.creationDate,
        m.clientName,
        m.clientSurname,
        m.clientEmail,
        m.clientContactNumber,
        m.ispReference,
        m.organizationId,
        m.networkId,
        m.locationType,
        l.mduUnit,
        l.mduName,
         l.mduStreetName,
         l.mduSurburb');
        $query_builder->where($query_builder->expr()->eq('m.orderNumber', ':order_number'));
        $query_builder->innerJoin('OrdersBundle\Entity\Mdu_Locations', 'l', 'WITH', 'm.location=l.locationId');
        $query_builder->setParameter('order_number', $order_number);
        $result = $query_builder->getQuery()->execute();
        return $result;
    }

    public function rejectOrder(string $order_number)
    {
        $query_builder = $this->createQueryBuilder('m');
        $query_builder->update('OrdersBundle\Entity\Mdu_Orders', 'm');
        $query_builder->set('m.orderStatus', '3');
        $query_builder->where($query_builder->expr()->eq('m.orderNumber', ':order_number'));
        $query_builder->setParameter('order_number', $order_number);
        $result = $query_builder->getQuery()->getResult();
        return $result;
    }
    public function editOrder($order)
    {
        $order_number = $order->order_number;
        $client_name = $order->client_name;
        $client_surname = $order->client_surname;
        $contact_number = $order->contact_number;
        $client_email = $order->client_email;

        $query_builder = $this->createQueryBuilder('m');
        $query_builder->update('OrdersBundle\Entity\Mdu_Orders', 'm');
        $query_builder->set('m.clientName', ':client_name');
        $query_builder->set('m.clientSurname', ':client_surname');
        $query_builder->set('m.clientContactNumber', ':contact_number');
        $query_builder->set('m.clientEmail', ':client_email');
        $query_builder->where($query_builder->expr()->eq('m.orderNumber', ':order_number'));
        $query_builder->setParameter('order_number', $order_number);
        $query_builder->setParameter('client_name', $client_name);
        $query_builder->setParameter('client_surname', $client_surname);
        $query_builder->setParameter('contact_number', $contact_number);
        $query_builder->setParameter('client_email', $client_email);
        $result = $query_builder->getQuery()->getResult();
        return $result;
    }
}
