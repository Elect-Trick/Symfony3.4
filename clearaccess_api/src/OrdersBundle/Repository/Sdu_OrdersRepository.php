<?php

namespace OrdersBundle\Repository;

use OrdersBundle\Entity\Sdu_Orders;



/**
 * Sdu_OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

use Doctrine\DBAL\Types\Type;

class Sdu_OrdersRepository extends \Doctrine\ORM\EntityRepository
{

    public function findDuplicateOrder(Sdu_Orders $input)
    {
        $query_builder = $this->createQueryBuilder('s');
        $query_builder->select('s.location');
        $query_builder->where($query_builder->expr()->andX(
            $query_builder->expr()->eq('s.orderStatus', ':order_status'),
            $query_builder->expr()->eq('s.location', ':location_id')
        ));
        $query_builder->setParameter('order_status', $input->getOrderStatus(), Type::INTEGER);
        $query_builder->setParameter('location_id', $input->getLocation(), Type::INTEGER);
        $result = $query_builder->getQuery()->getResult();
        return $result;
    }

    public function countEntries()
    {
        $query_builder = $this->createQueryBuilder('s');
        $query_builder->select('count(s.orderId)');
        $result = $query_builder->getQuery()->getSingleScalarResult();

        return $result;
    }

    public function findOrder(string $order_number)
    {
        $query_builder = $this->createQueryBuilder('s');
        $query_builder->select('s.orderType,
        s.orderNumber,
        s.orderStatus,
        s.product,
        s.creationDate,
        s.clientName,
        s.clientSurname,
        s.clientEmail,
        s.clientContactNumber,
        s.ispReference,
        s.organizationId,
        s.networkId,
        s.locationType,
        l.sduUnit,
         l.sduStreetName,
         l.sduSurburb');
        $query_builder->where($query_builder->expr()->eq('s.orderNumber', ':order_number'));
        $query_builder->innerJoin('OrdersBundle\Entity\Sdu_Locations', 'l', 'WITH', 's.location=l.locationId');
        $query_builder->setParameter('order_number', $order_number);
        $result = $query_builder->getQuery()->execute();
        return $result;
    }
    public function rejectOrder(string $order_number)
    {
        $query_builder = $this->createQueryBuilder('s');
        $query_builder->update('OrdersBundle\Entity\Sdu_Orders', 's');
        $query_builder->set('s.orderStatus', '3');
        $query_builder->where($query_builder->expr()->eq('s.orderNumber', ':order_number'));
        $query_builder->setParameter('order_number', $order_number);
        $result = $query_builder->getQuery()->getResult();
        return $result;
    }

    public function retrieveOrders(string $type, int $page)
    {
        //  order_status is used to filter out active and cancelled orders

        $order_status = [1,2];

        $page_size = 2;
        $off_set = ($page - 1) * $page_size;

        $count_query = $this->createQueryBuilder('c');
        $count_query->select('count(c.orderId)');
        $count_query->where($count_query->expr()->in('c.orderStatus', ':order_status'));
        $count_query->setParameter('order_status', $order_status);






        $query_builder = $this->createQueryBuilder('s');
        $query_builder->select('
        s.orderId as id, 
        s.orderType as order_type,
            s.orderNumber as order_number,
            s.orderStatus as order_status,
            s.product,
            s.creationDate as creation_date,
            s.clientName as client_name,
            s.clientSurname as client_surname,
            s.clientEmail as client_email,
            s.clientContactNumber as contact_number,
            s.ispReference as isp_reference,
            s.organizationId as organization_id,
            s.networkId as network_id,
            s.locationType as location_type,
            s.orderFulfilled as order_fullfilled,
            s.location,
            l.sduStreetName as street_name,
            l.sduUnit as unit,
            l.sduSurburb as surburb,
            l.locationId 

           ');
        $query_builder->innerJoin('OrdersBundle\Entity\Sdu_Locations', 'l', 'WITH', 's.location=l.locationId');
        $query_builder->where($query_builder->expr()->in('s.orderStatus', ':order_status'));

        $query_builder->setFirstResult($off_set);
        $query_builder->setMaxResults($page_size);
        $query_builder->setParameter('order_status', $order_status);
        $query_builder->addSelect('(' . $count_query->getDQL() . ') as totalEntries');

        $result = $query_builder->getQuery()->getResult();

        // $merged = array_merge($result,  $result2);

        return $result;
    }
    public function editOrder($order)
    {
        $order_number = $order->order_number;
        $client_name = $order->client_name;
        $client_surname = $order->client_surname;
        $contact_number = $order->contact_number;
        $client_email = $order->client_email;
        $query_builder = $this->createQueryBuilder('s');
        $query_builder->update('OrdersBundle\Entity\Sdu_Orders', 's');
        $query_builder->set('s.clientName', ':client_name');
        $query_builder->set('s.clientSurname', ':client_surname');
        $query_builder->set('s.clientContactNumber', ':contact_number');
        $query_builder->set('s.clientEmail', ':client_email');
        $query_builder->where($query_builder->expr()->eq('s.orderNumber', ':order_number'));
        $query_builder->setParameter('order_number', $order_number);
        $query_builder->setParameter('client_name', $client_name);
        $query_builder->setParameter('client_surname', $client_surname);
        $query_builder->setParameter('contact_number', $contact_number);
        $query_builder->setParameter('client_email', $client_email);
        $result = $query_builder->getQuery()->getResult();
        return $result;
    }
}
