<?php

namespace OrdersBundle\Repository;

use Doctrine\DBAL\Types\Type;
use stdClass;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * Sdu_LocationsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Sdu_LocationsRepository extends \Doctrine\ORM\EntityRepository
{

    public function findDuplicate(string $_locationRef, string $unit_number)
    {
        if (!is_null($_locationRef)) {
            $query_builder = $this->createQueryBuilder('s');
            $query_builder->select('s.locationId');
            $query_builder->Where('s.locationRef = :location_ref');
            $query_builder->andWhere('s.sduUnit = :unit_number');
            $query_builder->setParameter('unit_number', $unit_number);
            $query_builder->setParameter('location_ref', $_locationRef);
            $result = $query_builder->getQuery()->execute();

            return $result;
        }
    }

    /**
     * This function is used to retrieve a location then place a order based on that location.
     * Aceepts an object with the location type and location search string. 
     * It then returns a id and type, possibly more...
     *
     * 
     * 
     */
    public function findLocationWithSearchString(string $unit, string $sdu_street_name, string $surburb)
    {

        if (empty($surburb)) {
            $query_builder = $this->createQueryBuilder('s');
            $query_builder->select('
            s.locationId as location_id,
            s.sduUnit as unit,
            s.sduStreetName as street_name,
            s.sduSurburb as surburb,
             s.locationType as location_type');
            $query_builder->where($query_builder->expr()->like('s.sduUnit ', ':unit'));
            $query_builder->andwhere($query_builder->expr()->like('s.sduStreetName ', ':street_name'));
            $query_builder->setParameter('unit', '%' . $unit . '%', Type::STRING);
            $query_builder->setParameter('street_name', '%' . $sdu_street_name . '%', Type::STRING);
            $result = $query_builder->getQuery()->execute();
            return $result;
        } else {

            $query_builder = $this->createQueryBuilder('s');
            $query_builder->select('
            s.locationId as location_id,
            s.sduUnit as unit,
            s.sduStreetName as street_name,
            s.sduSurburb as surburb,
             s.locationType as location_type');
            $query_builder->where($query_builder->expr()->like('s.sduUnit ', ':unit'));
            $query_builder->andwhere($query_builder->expr()->like('s.sduStreetName ', ':street_name'));
            $query_builder->andwhere($query_builder->expr()->like('s.sduSurburb ', ':surburb'));
            $query_builder->setParameter('unit', '%' . $unit . '%', Type::STRING);
            $query_builder->setParameter('street_name', '%' . $sdu_street_name . '%', Type::STRING);
            $query_builder->setParameter('surburb', '%' . $surburb . '%', Type::STRING);
            $result = $query_builder->getQuery()->execute();
            return $result;
        }
    }
    /**
     * 
     *
     * 
     * 
     */
    public function findTicketsByLocation(int $location_id)
    {

        if (empty($surburb)) {

            $query2 = $this->getEntityManager()->createQuery('select ');
            $query_builder = $this->createQueryBuilder('s');
            $query_builder->select('s.locationId,s.sduUnit,s.sduStreetName,s.sduSurburb, s.locationType, s.');
            $query_builder->where($query_builder->expr()->eq('s.sduUnit ', ':unit'));
            // $query_builder->leftJoin('s.tickets','t');
            // $query_builder->leftJoin('ServicesBundle\Entity\Ticket', 't', 'WITH', 't.locationId = s.locationId');

            $query_builder->andwhere($query_builder->expr()->like('s.sduStreetName ', ':street_name'));
            $query_builder->setParameter('unit', '%' . $unit . '%', Type::STRING);
            $query_builder->setParameter('street_name', '%' . $sdu_street_name . '%', Type::STRING);
            $result = $query_builder->getQuery()->execute();
            // echo json_encode(result)
            return $result;
        } else {

            $query_builder = $this->createQueryBuilder('s');
            $query_builder->select('s.locationId,s.sduUnit,s.sduStreetName,s.sduSurburb, s.locationType');
            $query_builder->where($query_builder->expr()->like('s.sduUnit ', ':unit'));
            $query_builder->andwhere($query_builder->expr()->like('s.sduStreetName ', ':street_name'));
            $query_builder->andwhere($query_builder->expr()->like('s.sduSurburb ', ':surburb'));
            $query_builder->setParameter('unit', '%' . $unit . '%', Type::STRING);
            $query_builder->setParameter('street_name', '%' . $sdu_street_name . '%', Type::STRING);
            $query_builder->setParameter('surburb', '%' . $surburb . '%', Type::STRING);
            $result = $query_builder->getQuery()->execute();
            return $result;
        }
    }

    /**
     * Fetches paginated SDU Locations
     *
     * @param string $type
     * @param integer $page
     * @return void
     */
    public function fetchLocations(string $type, int $page)
    {
        $page_size = 2;
        // $page = 1;
        $off_set = ($page - 1) * $page_size;

        $query_builder = $this->createQueryBuilder('s');
        $query_builder->select('
        s.locationId as location_id,
        s.sduSurburb as surburb,
        s.sduStreetName as street_name
        ');
        $query_builder->where($query_builder->expr()->isNotNull('s.locationId'));
        $query_builder->groupBy('s.sduSurburb,s.sduStreetName');
        $query_builder ->setFirstResult($off_set);
        $query_builder ->setMaxResults($page_size);
        $query_builder->orderBy('s.sduSurburb', 'ASC');
     
        $query2 = $this->createQueryBuilder('c');
        $query2->select('count(c.locationId)');
        $query_builder ->addSelect('('.$query2->getDQL().') as totalEntries');
        $result = $query_builder->getQuery()->getResult();
        // $totalEntries = count($result);
        // $final = new stdClass();
        // $final->locations = $result;
        // $final->totalEntries = $totalEntries;
        return $result;
    }
    public function fetchUnits(string $street, string $surburb)
    {

        $query_builder = $this->createQueryBuilder('s');
        $query_builder->select('
        s.locationId as location_id,
        s.sduUnit as unit,
        s.sduSurburb as surburb,
        s.sduStreetName as street_name
        ');
        $query_builder->where($query_builder->expr()->like('s.sduStreetName', ':street_name'));
        $query_builder->andwhere($query_builder->expr()->like('s.sduSurburb', ':surburb'));
        $query_builder->setParameter('street_name', '%' . $street . '%', Type::STRING);
        $query_builder->setParameter('surburb', '%' . $surburb . '%', Type::STRING);

        $query_builder->orderBy('s.sduUnit', 'DESC');
        $result = $query_builder->getQuery()->getResult();;
        return $result;
    }
    /**
     * This function is used to retrieve a location based on a given ID
     * Aceepts an integer used to search for the location record.
     * @returns an array based object of the location
     *
     * 
     * 
     */
    public function findLocationById(int $locationId)
    {

        $query_builder = $this->createQueryBuilder('s');
        $query_builder->select('s.locationId as location_id,
            s.sduUnit as unit,
            s.sduStreetName as street_name,
            s.sduSurburb as surburb,
             s.locationType as location_type');
        $query_builder->Where($query_builder->expr()->eq('s.locationId', ':location_id'));
        $query_builder->setParameter('location_id', $locationId);
        $result = $query_builder->getQuery()->execute();
        return $result;
    }
}
