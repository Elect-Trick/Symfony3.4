<?php

namespace ServicesBundle\Repository;

use ServicesBundle\Entity\Mdu_Services;
use Doctrine\DBAL\Types\Type;

/**
 * Mdu_ServicesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Mdu_ServicesRepository extends \Doctrine\ORM\EntityRepository
{

    public function findDuplicateService(Mdu_Services $input)
    {
        $query_builder = $this->createQueryBuilder('m');
        $query_builder->select('m.locationId');
        $query_builder->where($query_builder->expr()->andX(
            $query_builder->expr()->eq('m.serviceStatus', ':service_status'),
            $query_builder->expr()->eq('m.locationId', ':location_id')
        ));
        $query_builder->setParameter('service_status', $input->getServiceStatus(), Type::INTEGER);
        $query_builder->setParameter('location_id', $input->getLocationId(), Type::INTEGER);
        $result = $query_builder->getQuery()->getResult();

        return $result;
    }
    /**
     * This function is used to retrieve a location then place a order based on that location.
     * Accepts an object with the location type and location search string. 
     * It then returns a id and type, possibly more...
     *
     * 
     * 
     */
    public function findServiceByLocation(string $unit, string $mdu_name, string $surburb)
    {


        if (empty($surburb)) {
            $query_builder = $this->getEntityManager()->createQuery('select
            l.locationId as location_id,
            l.mduUnit as unit,
            l.mduName as mdu_name,
            l.mduStreetName as street_name,
            l.mduSurburb as surburb,
            l.locationType as location_type,
            s.productId as product_id ,
            s.organizationId as organization_id,
            s.ispOrderNumber as isp_order_number,
            s.orderType as order_type,
            s.networkId as network_id,
            s.ispMacModem as isp_modem_mac,
            s.serviceStatus as service_status,
            s.lastUpdated as last_updated,
            s.vlan,
            o.clientName as client_name,
            o.clientSurname as client_surname,
            o.clientEmail as client_email,
            o.clientContactNumber as client_contact_number,
            o.orderNumber as order_number,
            p.productName as product_name
            from OrdersBundle\Entity\Mdu_Locations l 
            inner join ServicesBundle\Entity\Mdu_Services s WITH s.locationId=l.locationId
            inner join OrdersBundle\Entity\Mdu_Orders o with o.id=s.orderId
            inner join OrdersBundle\Entity\Products p with p.productId=s.productId

             where l.mduUnit like :unit AND  l.mduName like :mdu_name');
            $query_builder->setParameter('unit', '%' . $unit . '%', Type::STRING);
            $query_builder->setParameter('mdu_name', '%' . $mdu_name . '%', Type::STRING);
            $result = $query_builder->getResult();
            return $result;
        } else {

            $query_builder = $this->getEntityManager()->createQuery(
                'select
                l.locationId as location_id,
                l.mduUnit as unit,
                l.mduName as mdu_name,
                l.mduStreetName as street_name,
                l.mduSurburb as surburb,
                l.locationType as location_type,
                s.productId as product_id ,
                s.organizationId as organization_id,
                s.ispOrderNumber as isp_order_number,
                s.orderType as order_type,
                s.networkId as network_id,
                s.ispMacModem as isp_modem_mac,
                s.serviceStatus as service_status,
                s.lastUpdated as last_updated,
                s.vlan,
                o.clientName as client_name,
                o.clientSurname as client_surname,
                o.clientEmail as client_email,
                o.clientContactNumber as client_contact_number,
                o.orderNumber as order_number
                from OrdersBundle\Entity\Mdu_Locations l 
                inner join ServicesBundle\Entity\Mdu_Services s WITH s.locationId=l.locationId
                inner join OrdersBundle\Entity\Mdu_Orders o with o.id=s.orderId
                 where( l.mduUnit like :unit AND  l.mduName like :mdu_name AND l.mduSurburb like :surburb)'
            );
            $query_builder->setParameter('unit', '%' . $unit . '%', Type::STRING);
            $query_builder->setParameter('street_name', '%' . $mdu_name . '%', Type::STRING);
            $query_builder->setParameter('surburb', '%' . $surburb . '%', Type::STRING);
            $result = $query_builder->getResult();
            return $result;
        }
    } /**
     * This function is used to retrieve a location then place a order based on that location.
     * Accepts an object with the location type and location search string. 
     * It then returns a id and type, possibly more...
     *
     * 
     * 
     */
    public function findByFSAN(string $fsan)
    {

        if (!empty($fsan)) {
            $query_builder = $this->getEntityManager()->createQuery('select
            l.locationId as location_id,
            l.mduUnit as unit,
            l.mduName as mdu_name,
            l.mduStreetName as street_name,
            l.mduSurburb as surburb,
            l.locationType as location_type,
            s.productId as product_id ,
            s.organizationId as organization_id,
            s.ispOrderNumber as isp_order_number,
            s.orderType as order_type,
            s.networkId as network_id,
            s.ispMacModem as isp_modem_mac,
            s.serviceStatus as service_status,
            s.lastUpdated as last_updated,
            s.vlan,
            o.clientName as client_name,
            o.clientSurname as client_surname,
            o.clientEmail as client_email,
            o.clientContactNumber as client_contact_number,
            o.orderNumber as order_number
            from OrdersBundle\Entity\Mdu_Locations l 
            inner join ServicesBundle\Entity\Mdu_Services s WITH s.locationId=l.locationId
            inner join OrdersBundle\Entity\Mdu_Orders o with o.id=s.orderId
             where s.networkId like :fsan');
            $query_builder->setParameter('fsan', '%' . $fsan . '%', Type::STRING);
            $result = $query_builder->getResult();
            return $result;
        }
    }
}
